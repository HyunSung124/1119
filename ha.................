# def isPrime(n):
#     #소수일 경우 True 아닐경우 False를 리턴한다.
#     if n <= 1: return False
#     for i in range(2,n):
#         if n % i == 0:
#             return False
#     return True
# def solution(nums):
#     cnt = 0
#     #num에서 3개의 수들을 더해준다.
#     #더한 숫자가 소수인지를 판별한다. 함수(isPrime())로 만들어서 확인한다.
#     #소수일 경우 정답의 개수를 증가 시켜준다.
#     if isPrime(++):
#         cnt += 1
#     return cnt
# nums = [1,2,3,4]
# print(solution(nums))



# def is_Prime(n):
#     for i in range(2,n // 2):
#         if n % i == 0:
#             return False
#     return True
#
# def solution(nums):
#     answer = 0
#
#     for i,n0 in enumerate(nums):
#         for j,n1 in enumerate(nums[i+1:]):
#             for n2 in nums[i+j+2:]:
#                 if is_Prime(n0+n1+n2):
#                     answer += 1
#     return answer


#삼총사
# def solution(nums):
#     samchong = 0
#
#     for i,n0 in enumerate(nums):
#         for j,n1 in enumerate(nums[i+1:]):
#             for n2 in nums[i+j+2:]:
#                 if (n0+n1+n2) == 0:
#
#                     samchong += 1
#     return samchong
# print(solution([-2, 3, 0, 2, -5]))


#콜라 문제
# a = int(input())
# b = int(input())
# n = int(input())
# def solution(a, b, n):
#     answer = 0
#     for i in range(n):
#         if n < a:
#             break
#         else:
#             answer += b
#             n -= a
#             n += answer // 2
#
#     return answer
# print(solution(a, b, n))



# def solution(a, b, n):
#     total = 0
#     remain = 0
#     while n >= a:
#         remain = n % a
#         n = n // a * b
#         total += n
#         n += remain
#     return total
# a = 2
# b = 1
# n = 20


#옹알이(1)
def solution(babbling):
    answer = 0
    can = "aya", "ye", "woo", "ma"
    for i in babbling:
         if
    return answer
a = ["aya", "yee", "u", "maa", "wyeoo"]
